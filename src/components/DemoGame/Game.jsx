import React, { useState } from "react";
import { Unity, useUnityContext } from "react-unity-webgl";
import styles from "./Game.module.css";
import { getImageUrl } from "../../utils";

const gamedir = "game/Build";

const Game = () => {
  const { unityProvider, isLoaded, loadingProgression, unload, requestFullscreen } = useUnityContext({
    loaderUrl: `${gamedir}/game.loader.js`,
    dataUrl: `${gamedir}/game.data`,
    frameworkUrl: `${gamedir}/game.framework.js`,
    codeUrl: `${gamedir}/game.wasm`,
  });
  const [showDemo, setShowDemo] = useState(true);

  const loadingPercentage = Math.round(loadingProgression * 100);

  const handleRunDemoClick = () => {
    setShowDemo(false);
  };

  async function handleClickBack() {
    await unload();
    setShowDemo(true);
  }

  async function handleClickEnterFullscreen() {
    requestFullscreen(true);
  }
  
  return (
    <section className={styles.container} id="demo">

      {showDemo ? (
        <div >

          <ul>

            <li className={styles.aboutItem}>
              <div className={styles.demoTitle}>And here is my handicraft:</div>
            </li>

            <div className={styles.wholeFrame} >
              <div className={styles.demoTitle}>In this demo you will find two games</div>
              <div className={styles.contentHor}>

                <div className={styles.gameCont}>
                  <div>
                    <h1 className={styles.lTitle}>Left game</h1>
                  </div>
                  <div className={styles.contentHor2}>
                    <div> {/* image need to be box shaped  */}
                      <img src="/game/images/scr1.png" alt="demo screenshot 2" className={styles.imgg} />
                    </div>
                    <div className={styles.contentt}> {/* content */}
                      <p> First one is basic puzzle, highly inspired by "Toon Blast".
                        Simple level loop, board is generated by image, that allows me to make custom shapes on level start.
                      </p>
                    </div>
                  </div>

                </div>

                <div>
                  <div className={styles.gameCont}>

                    
                    <div>
                      <h1 className={styles.rTitle}>Right game </h1>
                    </div>
                    <div className={styles.contentHor2}>
                      <div className={styles.contentt}> {/* content */}
                        <p>
                          Second game is my own (maybe not so abicious xD) creation, "Robot fight".
                          In this game I wanted to show implementation of very simple procedural animations.
                        </p>
                      </div>
                      <div> {/* image need to be box shaped  */}
                        <img src="/game/images/scr1.png" alt="demo screenshot 2" className={styles.imgg} />
                      </div>
                    </div>

                  </div>
                </div>
              </div>





              <li className={styles.aboutItem}>
                <div className={styles.text}>
                  Demo is not done yet! I'm making it in my free time, which i dont have so much :/
                  <br />
                  Feel free to tell me what you think about it so far.  <br /><br />
                  If you have any feedback about this demo, or you want to know more, feel free to contact me.

                </div>
              </li>

              <div className={styles.buttonHor}>
                <li className={styles.button} >
                  <div >
                    <a className={styles.buttonText} onClick={handleRunDemoClick}>Run Demo</a>
                  </div>
                </li>
                <li className={styles.button} >
                  <div >
                    <a href="#contact" className={styles.buttonText}>Contact</a>
                  </div>
                </li>
              </div>

            </div>
          </ul>
        </div>
      ) : (

          <div>
            {isLoaded ? (null
            ) : (
              <div className={styles.loading}>
                <p >Loading app... {loadingPercentage}%</p>
              </div>
            )}

            <Unity
              className={styles.unityContent}
              style={{ visibility: isLoaded ? "visible" : "hidden" }}
              unityProvider={unityProvider} />



            <button onClick={handleClickBack}>Back</button>
            <button onClick={handleClickEnterFullscreen}>fullscreen</button>

          </div>
      )}

    </section>
  );
};

export default Game;
